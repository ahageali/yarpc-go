// Code generated by protoc-gen-yarpc-go
// source: encoding/protobuf/protoc-gen-yarpc-go/internal/testing/testing.proto
// DO NOT EDIT!

package testing

import (
	"context"
	"reflect"

	"github.com/gogo/protobuf/proto"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/yarpcproto"
)

// KeyValueYARPCClient is the YARPC client-side interface for the KeyValue service.
type KeyValueYARPCClient interface {
	GetValue(context.Context, *GetValueRequest, ...yarpc.CallOption) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest, ...yarpc.CallOption) (*SetValueResponse, error)
}

// NewKeyValueYARPCClient builds a new YARPC client for the KeyValue service.
func NewKeyValueYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) KeyValueYARPCClient {
	return &_KeyValueYARPCCaller{protobuf.NewClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.KeyValue",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// KeyValueYARPCServer is the YARPC server-side interface for the KeyValue service.
type KeyValueYARPCServer interface {
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error)
}

// BuildKeyValueYARPCProcedures prepares an implementation of the KeyValue service for YARPC registration.
func BuildKeyValueYARPCProcedures(server KeyValueYARPCServer) []transport.Procedure {
	handler := &_KeyValueYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.KeyValue",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "GetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.GetValue,
							NewRequest: newKeyValueServiceGetValueYARPCRequest,
						},
					),
				},
				{
					MethodName: "SetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.SetValue,
							NewRequest: newKeyValueServiceSetValueYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
		},
	)
}

type _KeyValueYARPCCaller struct {
	client protobuf.Client
}

func (c *_KeyValueYARPCCaller) GetValue(ctx context.Context, request *GetValueRequest, options ...yarpc.CallOption) (*GetValueResponse, error) {
	responseMessage, err := c.client.Call(ctx, "GetValue", request, newKeyValueServiceGetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceGetValueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_KeyValueYARPCCaller) SetValue(ctx context.Context, request *SetValueRequest, options ...yarpc.CallOption) (*SetValueResponse, error) {
	responseMessage, err := c.client.Call(ctx, "SetValue", request, newKeyValueServiceSetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceSetValueYARPCResponse, responseMessage)
	}
	return response, err
}

type _KeyValueYARPCHandler struct {
	server KeyValueYARPCServer
}

func (h *_KeyValueYARPCHandler) GetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyKeyValueServiceGetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_KeyValueYARPCHandler) SetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyKeyValueServiceSetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newKeyValueServiceGetValueYARPCRequest() proto.Message {
	return &GetValueRequest{}
}

func newKeyValueServiceGetValueYARPCResponse() proto.Message {
	return &GetValueResponse{}
}

func newKeyValueServiceSetValueYARPCRequest() proto.Message {
	return &SetValueRequest{}
}

func newKeyValueServiceSetValueYARPCResponse() proto.Message {
	return &SetValueResponse{}
}

var (
	emptyKeyValueServiceGetValueYARPCRequest  = &GetValueRequest{}
	emptyKeyValueServiceGetValueYARPCResponse = &GetValueResponse{}
	emptyKeyValueServiceSetValueYARPCRequest  = &SetValueRequest{}
	emptyKeyValueServiceSetValueYARPCResponse = &SetValueResponse{}
)

// SinkYARPCClient is the YARPC client-side interface for the Sink service.
type SinkYARPCClient interface {
	Fire(context.Context, *FireRequest, ...yarpc.CallOption) (yarpc.Ack, error)
}

// NewSinkYARPCClient builds a new YARPC client for the Sink service.
func NewSinkYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) SinkYARPCClient {
	return &_SinkYARPCCaller{protobuf.NewClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.Sink",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// SinkYARPCServer is the YARPC server-side interface for the Sink service.
type SinkYARPCServer interface {
	Fire(context.Context, *FireRequest) error
}

// BuildSinkYARPCProcedures prepares an implementation of the Sink service for YARPC registration.
func BuildSinkYARPCProcedures(server SinkYARPCServer) []transport.Procedure {
	handler := &_SinkYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName:        "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.Sink",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{
				{
					MethodName: "Fire",
					Handler: protobuf.NewOnewayHandler(
						protobuf.OnewayHandlerParams{
							Handle:     handler.Fire,
							NewRequest: newSinkServiceFireYARPCRequest,
						},
					),
				},
			},
		},
	)
}

type _SinkYARPCCaller struct {
	client protobuf.Client
}

func (c *_SinkYARPCCaller) Fire(ctx context.Context, request *FireRequest, options ...yarpc.CallOption) (yarpc.Ack, error) {
	return c.client.CallOneway(ctx, "Fire", request, options...)
}

type _SinkYARPCHandler struct {
	server SinkYARPCServer
}

func (h *_SinkYARPCHandler) Fire(ctx context.Context, requestMessage proto.Message) error {
	var request *FireRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*FireRequest)
		if !ok {
			return protobuf.CastError(emptySinkServiceFireYARPCRequest, requestMessage)
		}
	}
	return h.server.Fire(ctx, request)
}

func newSinkServiceFireYARPCRequest() proto.Message {
	return &FireRequest{}
}

func newSinkServiceFireYARPCResponse() proto.Message {
	return &yarpcproto.Oneway{}
}

var (
	emptySinkServiceFireYARPCRequest  = &FireRequest{}
	emptySinkServiceFireYARPCResponse = &yarpcproto.Oneway{}
)

// FooYARPCClient is the YARPC client-side interface for the Foo service.
type FooYARPCClient interface {
	GetValue(context.Context, *GetValueRequest, ...yarpc.CallOption) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest, ...yarpc.CallOption) (*SetValueResponse, error)
	Fire(context.Context, *FireRequest, ...yarpc.CallOption) (yarpc.Ack, error)
	HelloOne(context.Context, ...yarpc.CallOption) (FooServiceHelloOneYARPCClient, error)
	HelloTwo(context.Context, *HelloRequest, ...yarpc.CallOption) (FooServiceHelloTwoYARPCClient, error)
	HelloThree(context.Context, ...yarpc.CallOption) (FooServiceHelloThreeYARPCClient, error)
}

// FooServiceHelloOneYARPCClient sends HelloRequests and receives the single HelloResponse when sending is done.
type FooServiceHelloOneYARPCClient interface {
	Context() context.Context
	Request() *transport.Request
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
}

// FooServiceHelloTwoYARPCClient receives HelloResponses, returning io.EOF when the stream is complete.
type FooServiceHelloTwoYARPCClient interface {
	Context() context.Context
	Request() *transport.Request
	Recv() (*HelloResponse, error)
}

// FooServiceHelloThreeYARPCClient sends HelloRequests and receives HelloResponses, returning io.EOF when the stream is complete.
type FooServiceHelloThreeYARPCClient interface {
	Context() context.Context
	Request() *transport.Request
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	CloseSend() error
}

// NewFooYARPCClient builds a new YARPC client for the Foo service.
func NewFooYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) FooYARPCClient {
	return &_FooYARPCCaller{protobuf.NewClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.Foo",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// FooYARPCServer is the YARPC server-side interface for the Foo service.
type FooYARPCServer interface {
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error)
	Fire(context.Context, *FireRequest) error
	HelloOne(FooServiceHelloOneYARPCServer) (*HelloResponse, error)
	HelloTwo(*HelloRequest, FooServiceHelloTwoYARPCServer) error
	HelloThree(FooServiceHelloThreeYARPCServer) error
}

// FooServiceHelloOneYARPCServer receives HelloRequests.
type FooServiceHelloOneYARPCServer interface {
	Context() context.Context
	Request() *transport.Request
	Recv() (*HelloRequest, error)
}

// FooServiceHelloTwoYARPCServer sends HelloResponses.
type FooServiceHelloTwoYARPCServer interface {
	Context() context.Context
	Request() *transport.Request
	Send(*HelloResponse) error
}

// FooServiceHelloThreeYARPCServer receives HelloRequests and sends HelloResponse.
type FooServiceHelloThreeYARPCServer interface {
	Context() context.Context
	Request() *transport.Request
	Recv() (*HelloRequest, error)
	Send(*HelloResponse) error
	CloseSend() error
}

// BuildFooYARPCProcedures prepares an implementation of the Foo service for YARPC registration.
func BuildFooYARPCProcedures(server FooYARPCServer) []transport.Procedure {
	handler := &_FooYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.Foo",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "GetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.GetValue,
							NewRequest: newFooServiceGetValueYARPCRequest,
						},
					),
				},
				{
					MethodName: "SetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.SetValue,
							NewRequest: newFooServiceSetValueYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{
				{
					MethodName: "Fire",
					Handler: protobuf.NewOnewayHandler(
						protobuf.OnewayHandlerParams{
							Handle:     handler.Fire,
							NewRequest: newFooServiceFireYARPCRequest,
						},
					),
				},
			},
		},
	)
}

type _FooYARPCCaller struct {
	client protobuf.Client
}

func (c *_FooYARPCCaller) GetValue(ctx context.Context, request *GetValueRequest, options ...yarpc.CallOption) (*GetValueResponse, error) {
	responseMessage, err := c.client.Call(ctx, "GetValue", request, newFooServiceGetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyFooServiceGetValueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_FooYARPCCaller) SetValue(ctx context.Context, request *SetValueRequest, options ...yarpc.CallOption) (*SetValueResponse, error) {
	responseMessage, err := c.client.Call(ctx, "SetValue", request, newFooServiceSetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyFooServiceSetValueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_FooYARPCCaller) Fire(ctx context.Context, request *FireRequest, options ...yarpc.CallOption) (yarpc.Ack, error) {
	return c.client.CallOneway(ctx, "Fire", request, options...)
}

func (c *_FooYARPCCaller) HelloOne(ctx context.Context, options ...yarpc.CallOption) (FooServiceHelloOneYARPCClient, error) {
	// TODO
	return &_FooServiceHelloOneYARPCClient{}, nil
}

func (c *_FooYARPCCaller) HelloTwo(ctx context.Context, request *HelloRequest, options ...yarpc.CallOption) (FooServiceHelloTwoYARPCClient, error) {
	// TODO
	return &_FooServiceHelloTwoYARPCClient{}, nil
}

func (c *_FooYARPCCaller) HelloThree(ctx context.Context, options ...yarpc.CallOption) (FooServiceHelloThreeYARPCClient, error) {
	// TODO
	return &_FooServiceHelloThreeYARPCClient{}, nil
}

type _FooYARPCHandler struct {
	server FooYARPCServer
}

func (h *_FooYARPCHandler) GetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyFooServiceGetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_FooYARPCHandler) SetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyFooServiceSetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_FooYARPCHandler) Fire(ctx context.Context, requestMessage proto.Message) error {
	var request *FireRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*FireRequest)
		if !ok {
			return protobuf.CastError(emptyFooServiceFireYARPCRequest, requestMessage)
		}
	}
	return h.server.Fire(ctx, request)
}

func (h *_FooYARPCHandler) HelloOne(serverStream transport.ServerStream) (*HelloResponse, error) {
	return h.server.HelloOne(&_FooServiceHelloOneYARPCServer{serverStream: serverStream})
}

func (h *_FooYARPCHandler) HelloTwo(requestMessage proto.Message, serverStream transport.ServerStream) error {
	var request *HelloRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*HelloRequest)
		if !ok {
			return protobuf.CastError(emptyFooServiceHelloTwoYARPCRequest, requestMessage)
		}
	}
	return h.server.HelloTwo(request, &_FooServiceHelloTwoYARPCServer{serverStream: serverStream})
}

func (h *_FooYARPCHandler) HelloThree(serverStream transport.ServerStream) error {
	return h.server.HelloThree(&_FooServiceHelloThreeYARPCServer{serverStream: serverStream})
}

type _FooServiceHelloOneYARPCClient struct {
	// TODO
}

func (c *_FooServiceHelloOneYARPCClient) Context() context.Context {
	// TODO
	return nil
}

func (c *_FooServiceHelloOneYARPCClient) Request() *transport.Request {
	// TODO
	return nil
}

func (c *_FooServiceHelloOneYARPCClient) Send(request *HelloRequest) error {
	// TODO
	return nil
}

func (c *_FooServiceHelloOneYARPCClient) CloseAndRecv() (*HelloResponse, error) {
	// TODO
	return nil, nil
}

type _FooServiceHelloTwoYARPCClient struct {
	//TODO
}

func (c *_FooServiceHelloTwoYARPCClient) Context() context.Context {
	//TODO
	return nil
}

func (c *_FooServiceHelloTwoYARPCClient) Request() *transport.Request {
	//TODO
	return nil
}

func (c *_FooServiceHelloTwoYARPCClient) Recv() (*HelloResponse, error) {
	//TODO
	return nil, nil
}

type _FooServiceHelloThreeYARPCClient struct {
	//TODO
}

func (c *_FooServiceHelloThreeYARPCClient) Context() context.Context {
	//TODO
	return nil
}

func (c *_FooServiceHelloThreeYARPCClient) Request() *transport.Request {
	//TODO
	return nil
}

func (c *_FooServiceHelloThreeYARPCClient) Send(request *HelloRequest) error {
	//TODO
	return nil
}

func (c *_FooServiceHelloThreeYARPCClient) Recv() (*HelloResponse, error) {
	//TODO
	return nil, nil
}

func (c *_FooServiceHelloThreeYARPCClient) CloseSend() error {
	return nil
}

type _FooServiceHelloOneYARPCServer struct {
	serverStream transport.ServerStream
}

func (s *_FooServiceHelloOneYARPCServer) Context() context.Context {
	// TODO
	return nil
}

func (s *_FooServiceHelloOneYARPCServer) Request() *transport.Request {
	// TODO
	return nil
}

func (s *_FooServiceHelloOneYARPCServer) Recv() (*HelloRequest, error) {
	// TODO
	return nil, nil
}

type _FooServiceHelloTwoYARPCServer struct {
	serverStream transport.ServerStream
}

func (s *_FooServiceHelloTwoYARPCServer) Context() context.Context {
	// TODO
	return nil
}

func (s *_FooServiceHelloTwoYARPCServer) Request() *transport.Request {
	// TODO
	return nil
}

func (s *_FooServiceHelloTwoYARPCServer) Send(response *HelloResponse) error {
	// TODO
	return nil
}

type _FooServiceHelloThreeYARPCServer struct {
	serverStream transport.ServerStream
}

func (s *_FooServiceHelloThreeYARPCServer) Context() context.Context {
	// TODO
	return nil
}

func (s *_FooServiceHelloThreeYARPCServer) Request() *transport.Request {
	// TODO
	return nil
}

func (s *_FooServiceHelloThreeYARPCServer) Recv() (*HelloRequest, error) {
	// TODO
	return nil, nil
}

func (s *_FooServiceHelloThreeYARPCServer) Send(response *HelloResponse) error {
	// TODO
	return nil
}

func (s *_FooServiceHelloThreeYARPCServer) CloseSend() error {
	// TODO
	return nil
}

func newFooServiceGetValueYARPCRequest() proto.Message {
	return &GetValueRequest{}
}

func newFooServiceGetValueYARPCResponse() proto.Message {
	return &GetValueResponse{}
}

func newFooServiceSetValueYARPCRequest() proto.Message {
	return &SetValueRequest{}
}

func newFooServiceSetValueYARPCResponse() proto.Message {
	return &SetValueResponse{}
}

func newFooServiceFireYARPCRequest() proto.Message {
	return &FireRequest{}
}

func newFooServiceFireYARPCResponse() proto.Message {
	return &yarpcproto.Oneway{}
}

func newFooServiceHelloOneYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newFooServiceHelloOneYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newFooServiceHelloTwoYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newFooServiceHelloTwoYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newFooServiceHelloThreeYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newFooServiceHelloThreeYARPCResponse() proto.Message {
	return &HelloResponse{}
}

var (
	emptyFooServiceGetValueYARPCRequest    = &GetValueRequest{}
	emptyFooServiceGetValueYARPCResponse   = &GetValueResponse{}
	emptyFooServiceSetValueYARPCRequest    = &SetValueRequest{}
	emptyFooServiceSetValueYARPCResponse   = &SetValueResponse{}
	emptyFooServiceFireYARPCRequest        = &FireRequest{}
	emptyFooServiceFireYARPCResponse       = &yarpcproto.Oneway{}
	emptyFooServiceHelloOneYARPCRequest    = &HelloRequest{}
	emptyFooServiceHelloOneYARPCResponse   = &HelloResponse{}
	emptyFooServiceHelloTwoYARPCRequest    = &HelloRequest{}
	emptyFooServiceHelloTwoYARPCResponse   = &HelloResponse{}
	emptyFooServiceHelloThreeYARPCRequest  = &HelloRequest{}
	emptyFooServiceHelloThreeYARPCResponse = &HelloResponse{}
)

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) KeyValueYARPCClient {
			return NewKeyValueYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) SinkYARPCClient {
			return NewSinkYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) FooYARPCClient {
			return NewFooYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
